/* 
 * Fractal Zoomer, Copyright (C) 2015 hrkalona2
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package fractalzoomer.palettes;

import fractalzoomer.main.MainWindow;
import fractalzoomer.core.ThreadDraw;
import java.awt.Color;
import java.awt.image.BufferedImage;

/**
 *
 * @author hrkalona2
 */
public class Palette extends ThreadDraw {

    private static final int[] default_palette = {-16774636, -16510682, -16246472, -15982517, -15718307, -15454353, -15190398, -14860652, -14596442, -14332487, -14068277, -13804323, -13474576, -13673506, -13806644, -14005318, -14138456, -14337130, -14470267, -14668941, -14802079, -15000753, -15133891, -15332565, -15465702, -14350567, -13169639, -12054248, -10873320, -9758185, -8642793, -7461866, -6280938, -5165803, -3984875, -2869484, -1688556, -2869485, -3984622, -5099759, -6214896, -7330033, -8445170, -9560563, -10675700, -11790837, -12905974, -14021111, -15136247, -14018808, -12901369, -11783674, -10666234, -9548795, -8431356, -7313661, -6196221, -5078526, -3961087, -2843648, -1660416, -2842880, -3959807, -5142270, -6259197, -7441660, -8558332, -9740795, -10857722, -12040185, -13157112, -14339575, -15456246, -15586039, -15715832, -15780089, -15909882, -16039675, -16103931, -16233724, -16363517, -16427774, -16557567, -16687360, -16751616, -16753664, -16755455, -16691966, -16693757, -16630268, -16632060, -16634107, -16570362, -16572409, -16508664, -16510711, -16446966, -15331573, -14216179, -13100785, -11985392, -10869998, -9754604, -8639467, -7523817, -6408423, -5293030, -4177636, -2996706, -3653601, -4310495, -4967389, -5624284, -6281178, -6937816, -7594711, -8251605, -8908499, -9565394, -10287824, -10878926, -10418377, -9892035, -9431485, -8905143, -8444593, -7918507, -7457702, -6931360, -6470810, -5944468, -5483918, -4957576, -5942159, -6926742, -7911324, -8895907, -9880490, -10864816, -11849399, -12833982, -13818564, -14803147, -15787730, -16772056, -16639947, -16442302, -16310192, -16112547, -15980438, -15848073, -15650427, -15452782, -15320672, -15123027, -14990918, -14793016, -14990919, -15123286, -15321189, -15453556, -15651459, -15783826, -15981729, -16114096, -16311999, -16444366, -16642525};
    private static final int[] spectrum_palette = {-16770817, -16181505, -15591937, -15002369, -14412801, -13823233, -13168129, -12578561, -11988993, -11399425, -10809857, -10155009, -9565441, -8975873, -8386305, -7796737, -7207169, -6552065, -5962497, -5372929, -4783361, -4193793, -3538689, -3407626, -3211026, -3079962, -2883362, -2752299, -2555699, -2424635, -2228035, -2096972, -1900372, -1769308, -1572708, -1441645, -1245045, -1113981, -917381, -786318, -589718, -458654, -262054, -65454, -63922, -62390, -60602, -59070, -57538, -55750, -54218, -52686, -50898, -49366, -47833, -46045, -44513, -42981, -41193, -39661, -38129, -36341, -34809, -33277, -31488, -357888, -684032, -1010432, -1271040, -1597440, -1923584, -2249984, -2510592, -2836992, -3163136, -3423744, -3750144, -4076288, -4402688, -4663296, -4989696, -5315840, -5642240, -5902848, -6229248, -6555392, -6816000, -7340285, -7799033, -8257782, -8716530, -9175279, -9699563, -10158311, -10617060, -11075808, -11534557, -12058841, -12517590, -12976338, -13435086, -13893835, -14418119, -14876868, -15335616, -15794365, -16253113, -16711861, -16712621, -16713124, -16713628, -16714131, -16714635, -16715394, -16715897, -16716401, -16716904, -16717408, -16718167, -16718671, -16719174, -16719677, -16720181, -16720940, -16721444, -16721947, -16722451, -16722954, -16723457, -16725761, -16727809, -16730113, -16732161, -16734465, -16736513, -16738561, -16740865, -16742913, -16745217, -16747265, -16749313, -16751617, -16753665, -16755969, -16758017, -16760065, -16762369, -16764417, -16766721, -16768769};
    private static final int[] alternative_palette = {-16777025, -16252733, -15728441, -15204149, -14679856, -14090028, -13565736, -13041444, -12517151, -11992859, -11403031, -10878739, -10354446, -9830154, -9305862, -8716033, -8388368, -8060702, -7733037, -7339835, -7012170, -6684504, -6356839, -5963637, -5434765, -4905892, -4377019, -3848146, -3319273, -2724608, -2195712, -1666816, -1137920, -609024, -14336, -208128, -336384, -530176, -658432, -786688, -1121024, -1389568, -1658368, -1926912, -2195712, -2529792, -2798592, -3067136, -3335936, -3604480, -3932144, -4194272, -4456400, -4718528, -4980657, -5242785, -5504912, -5242753, -4980593, -4718433, -4456273, -4194113, -3931953, -3669793, -3407633, -3407118, -3341067, -3275016, -3208965, -3142657, -2943495, -2678540, -2413841, -2148886, -1884187, -1619232, -1354278, -1089579, -824624, -559925, -294970, -30015, -749378, -1468741, -2187848, -2907211, -3626318, -4868938, -6045765, -7222848, -8399675, -9576502, -10753585, -11930412, -13107239, -13830693, -14554146, -15343135, -16001052, -16724249, -16728597, -16732688, -16737035, -16741126, -16745217, -16749583, -16753693, -16757802, -16762168, -16766278, -16770387, -16767841, -16765295, -16762748, -16760202, -16757655, -16755109, -16752562, -16750016, -16747469, -16745151, -16742576, -16740002, -16737427, -16734853, -16732278, -16729703, -16727129, -16724554, -16721980, -16719405, -16716830, -16322585, -15928339, -15534093, -15139847, -14745601, -13830657, -12849921, -11869185, -10888449, -9907713, -8926977, -7946241, -6963457, -5980673, -4997633, -4014849, -3032065, -2049025, -1066241, -83201, -280065, -411137, -607745, -738817, -869889, -1001220, -1066758, -1197832, -1263370, -1328908, -1789975, -2185250, -2580781, -2976056, -3371331, -3832398, -4227673, -4622948, -5018479, -5413754, -5809029, -6270096, -6665371, -7060646, -7456178, -7851453, -8246727, -8707772, -9103024, -9498532, -9893784, -10289036, -10745729, -11136885, -11528041, -11919197, -12310354, -12701510, -13092666, -13483822, -13940532, -14331705, -14722879, -15114052, -15570761, -15961935, -16353108, -16744281, -16414815, -16085092, -15689834, -15360111, -15030389, -14700666, -14305407, -13975685, -13580426, -13250704, -12920981, -12525722, -12195986, -11800713, -11470976, -11075703, -10750063, -10424166, -10032733, -9706836, -9380939, -8989506, -8663609, -8337712, -7946279, -7620653, -7294771, -6903353, -6577471, -6251589, -5860171, -5534289, -5142871, -4816989, -4491107, -4099689, -3773807, -3382388, -4367226, -5286528, -6271366, -7190668, -8175506, -9094807, -9882767, -10670726, -11458686, -12180853, -12968812, -13756772, -14478939, -15266899, -16054858};
    private static final int[] alternative2_palette = {-16777216, -16773345, -16769217, -16765089, -16760961, -16756834, -16752706, -16748578, -16744450, -16748578, -16752705, -16756577, -16760704, -16764832, -16768703, -16772831, -16776702, -16768751, -16760799, -16752848, -16744640, -16736688, -16728737, -16720785, -16712577, -16720529, -16728481, -16736433, -16744385, -16752337, -16760289, -16768241, -16776192, -15785472, -14728960, -13737984, -12681472, -11690752, -10634240, -9643264, -8586752, -9577728, -10568448, -11493888, -12484608, -13475328, -14400768, -15391488, -16316672, -14347008, -12377088, -10407424, -8437504, -6467584, -4497920, -2528000, -558080, -2528256, -4498176, -6468352, -8372736, -10342912, -12312832, -14283008, -16187392, -14286833, -12320738, -10420179, -8454083, -6553524, -4587429, -2686870, -720774, -2686868, -4587426, -6487984, -8388542, -10354636, -12255194, -14155752, -16056309, -14151896, -12247483, -10343070, -8438657, -6534244, -4629831, -2725418, -820749, -2724906, -4628807, -6532964, -8371328, -10275485, -12179386, -14083543, -15921907, -15066583, -14145466, -13290142, -12369025, -11513701, -10592584, -9737260, -8816143, -9868844, -10855752, -11842660, -12829568, -13816476, -14803384, -15790292, -16777200, -16773589, -16769721, -16765853, -16761985, -16758118, -16754250, -16750382, -16746514, -16749870, -16753225, -16756325, -16759680, -16763036, -16766135, -16769491, -16772590, -16765666, -16758741, -16751817, -16744636, -16737711, -16730787, -16723862, -16716681, -16723608, -16730535, -16737462, -16744389, -16751316, -16758243, -16765170, -16772096, -15847936, -14857984, -13933568, -12943616, -11953920, -11029504, -10039552, -9049600, -9842944, -10636032, -11429376, -12222464, -13015808, -13808896, -14602240, -15329792, -13623040, -11916032, -10209024, -8436480, -6729472, -5022464, -3315456, -1542912, -3250688, -4958464, -6665984, -8373760, -10081536, -11789056, -13496832, -15138816, -13500402, -11796452, -10158038, -8454087, -6815673, -5111723, -3473309, -1769358, -3473305, -5111716, -6750127, -8388538, -10092485, -11730896, -13369307, -15007717, -13365708, -11723699, -10081690, -8439681, -6797672, -5155663, -3513654, -1871389, -3512630, -5153615, -6794856, -8370304, -10011545, -11652530, -13293771, -14869219, -14211275, -13487538, -12829594, -12105857, -11447913, -10724176, -10066232, -9342495, -10329404, -11250520, -12171636, -13092752, -14013868, -14934984, -15856100,};//{-6216672, -6938082, -7659492, -8380902, -9036520, -9757930, -10479340, -11200750, -11856368, -12577778, -13299188, -14020598, -14676216, -13689065, -12701914, -11714763, -10727611, -9740460, -8753565, -7700878, -6713470, -5726319, -4739168, -3752017, -2699329, -2765383, -2765900, -2831953, -2832471, -2898524, -2899041, -2899559, -2965612, -2966129, -3032183, -3032700, -3032961, -3296648, -3560334, -3823765, -4021915, -4285346, -4549032, -4812719, -5010613, -5274300, -5537730, -5801417, -5999311, -6066641, -6068434, -6070228, -6071765, -6139095, -6140888, -6142681, -6144219, -6211548, -6213342, -6215135};
    private static final int[] alternative3_palette = {-9175033, -8055546, -6935803, -5750780, -4631037, -3511294, -2326271, -1206528, -21248, -813312, -1605376, -2397184, -3189248, -3981312, -4773120, -5565184, -6291456, -7602176, -8912896, -10223616, -11534336, -12845056, -14155776, -15466496, -16777216, -16580608, -16384000, -16121856, -15925248, -15728640, -15466496, -15269888, -15007744, -15138816, -15269888, -15335424, -15466496, -15597568, -15663104, -15794176, -15859712, -15990528, -16121344, -16252160, -16317440, -16448256, -16579072, -16709888, -16774912, -16771809, -16768449, -16765089, -16761729, -16758369, -16755009, -16751649, -16748289, -16744961, -16741633, -16738305, -16734721, -16731393, -16728065, -16724737, -16721153, -16728353, -16735297, -16742241, -16749185, -16756385, -16763329, -16770273, -16777216, -16769280, -16761088, -16752896, -16744704, -16736512, -16728320, -16720128, -16711936, -16193792, -15675392, -15156992, -14573056, -14054656, -13536256, -13017856, -12433920, -10920700, -9341944, -7828724, -6249968, -4671212, -3157992, -1579236, -224, -2101732, -4202984, -6304492, -8405744, -10507252, -12608504, -14710012, -16745728, -16749056, -16752384, -16755712, -16759040, -16762368, -16765696, -16769024, -16772096, -16772864, -16773376, -16774144, -16774656, -16775424, -16775936, -16776704, -16777216, -14875648, -12908544, -10941440, -8974336, -7007232, -5040128, -3073024, -1105664, -972032, -838144, -704256, -570368, -436736, -302848, -168960, -35072, -2136064, -4237056, -6338048, -8439040, -10540032, -12641024, -14742016, -16777216, -15532032, -14286848, -13041664, -11796480, -10551296, -9306112, -8060928, -6815744, -8060928, -9306112, -10551296, -11796480, -13041664, -14286848, -15532032, -16777216, -16707297, -16571841, -16501921, -16366465, -16296545, -16161089, -16091169, -15955713, -16091169, -16161089, -16296545, -16366465, -16501921, -16571841, -16707297, -16777216, -14745600, -12648448, -10551296, -8454144, -6356992, -4259840, -2162688, -65536, -57586, -49380, -41173, -32967, -24761, -16554, -8348, -141, -2105500, -4210858, -6316217, -8421575, -10526933, -12632292, -14737650, -16777216, -14745600, -12648448, -10551296, -8454144, -6356992, -4259840, -2162688, -65536, -2162688, -4259840, -6356992, -8454144, -10551296, -12648448, -14745600, -16777216, -14745600, -12648448, -10551296, -8454144, -6356992, -4259840, -2162688, -65536, -57585, -49378, -41170, -32963, -24756, -16548, -8341, -133, -2105493, -4210852, -6316212, -8421571, -10526930, -12632290, -14737649, -16777216, -14740992, -12639232, -10537472, -8435712, -6333952, -4232192, -2130432, -28672, -1212928, -2331647, -3515902, -4634621, -5753340, -6937595, -8056314,};//{-2701678, -2570090, -2438501, -2306912, -2109532, -1977943, -1846354, -1714766, -1517385, -1385796, -1254208, -1122619, -925238, -1779778, -2568782, -3357785, -4146789, -4935793, -5724796, -6513800, -7302804, -8091807, -8880811, -9670071, -10458818, -10326463, -10128572, -9930424, -9732533, -9599922, -9402030, -9204139, -9005992, -8873636, -8675489, -8477598, -8279450, -8543904, -8808101, -9007018, -9271215, -9470132, -9734329, -9998526, -10197443, -10461640, -10660557, -10924754, -11123415, -10465487, -9741766, -9018045, -8359860, -7636396, -6912675, -6254490, -5530769, -4807305, -4149120, -3425399};
    private static final int[] alternative4_palette = {-16777216, -16514816, -16252159, -15989758, -15727102, -15464701, -15202044, -14939644, -14611451, -14349050, -14086394, -13823993, -13561336, -13298936, -13036279, -12773878, -12445685, -12117748, -11789555, -11461618, -11133425, -10805488, -10477295, -10149358, -9755629, -9427436, -9099499, -8771306, -8443369, -8115176, -7787239, -7459046, -7065316, -6671330, -6277344, -5883358, -5489116, -5095130, -4635608, -4241622, -3847379, -3453393, -3059407, -2599885, -2205643, -1811657, -1417671, -1023685, -563906, -627903, -626364, -690361, -688566, -752563, -751024, -814765, -813225, -811686, -875427, -873888, -937885, -936090, -1000087, -998548, -996752, -1192590, -1322892, -1453194, -1583496, -1713798, -1844100, -1974402, -2104448, -2300286, -2430588, -2560890, -2691192, -2821494, -2951796, -3082098, -3212143, -3343212, -3474281, -3605350, -3670883, -3801952, -3933021, -3998554, -4129622, -4260691, -4326224, -4457293, -4588362, -4653895, -4784964, -4916033, -4981565, -5179194, -5376822, -5574451, -5772079, -5969707, -6167336, -6364964, -6562592, -6760221, -6957849, -7155478, -7353106, -7550734, -7748363, -7945991, -8143363, -8472843, -8802066, -9131545, -9395232, -9724712, -10053935, -10317878, -10647101, -10976581, -11240268, -11569747, -11898970, -12162914, -12492137, -12821616, -13085303, -13348735, -13546631, -13744526, -13942422, -14205854, -14403749, -14601645, -14799284, -15062716, -15260612, -15458507, -15656403, -15919835, -16117730, -16315626, -16513265, -16447730, -16382194, -16251123, -16185587, -16054516, -15988980, -15857909, -15792373, -15726837, -15595766, -15530230, -15399159, -15333623, -15202552, -15137016, -15005688, -14808824, -14546423, -14284023, -14086902, -13824502, -13562101, -13365237, -13102580, -12840180, -12643315, -12380915, -12118258, -11921394, -11658993, -11396593, -11133936, -10805744, -10477551, -10083822, -9755374, -9427181, -9033452, -8705260, -8311275, -7983082, -7654890, -7261161, -6932712, -6604520, -6210791, -5882598, -5488613, -5225701, -4896996, -4568292, -4239843, -3911138, -3582434, -3253985, -2925280, -2662112, -2333663, -2004959, -1676254, -1347805, -1019101, -690396, -361691, -491483, -621275, -685275, -815067, -944859, -1008859, -1138651, -1202651, -1332443, -1462235, -1526235, -1656027, -1785819, -1849819, -1979611, -2043610, -2436315, -2763227, -3090139, -3417051, -3744219, -4136667, -4463579, -4790491, -5117659, -5444571, -5837019, -6163931, -6491099, -6818011, -7144923, -7471835, -7932637, -8327646, -8788447, -9183456, -9644257, -10039267, -10500068, -10895077, -11290086, -11750887, -12145897, -12606698, -13001707, -13462508, -13857517, -14252526, -14450927, -14583792, -14716657, -14849522, -14982387, -15115252, -15248117, -15380982, -15579383, -15712248, -15845113, -15977978, -16110843, -16243708, -16376573, -16509438, -16575487, -16575743, -16576255, -16576511, -16642303, -16642815, -16643071, -16643327, -16709376, -16709632, -16710144, -16710400, -16776192, -16776704, -16776960};
    private static final int[] alternative5_palette = {-16777216, -16777214, -16777211, -16777208, -16777205, -16777203, -16777200, -16777197, -16777194, -16777165, -16777136, -16777107, -16777078, -16777049, -16777020, -16776991, -16776961, -16776988, -16777014, -16777041, -16777067, -16777093, -16777120, -16777146, -16777172, -16777146, -16777120, -16777093, -16777067, -16777041, -16777014, -16776988, -16776961, -16769025, -16760833, -16752641, -16744449, -16736257, -16728065, -16719873, -16711681, -16719897, -16728112, -16736328, -16744543, -16752759, -16760974, -16769190, -16777149, -16769222, -16761038, -16752855, -16744671, -16736487, -16728304, -16720120, -16711936, -16720117, -16728298, -16736479, -16744660, -16752841, -16761022, -16769203, -16777127, -14737587, -12632254, -10526921, -8421588, -6316255, -4210922, -2105589, -256, -2105587, -4210917, -6316247, -8421577, -10526907, -12632237, -14737567, -16777105, -14745503, -12648365, -10551227, -8454089, -6356951, -4259813, -2162675, -65536, -2162672, -4259807, -6356943, -8454078, -10551213, -12648349, -14745484, -16777083, -14745452, -12648285, -10551118, -8453950, -6356783, -4259616, -2162449, -65281, -2162446, -4259610, -6356775, -8453939, -10551104, -12648268, -14745433, -16777061, -14737497, -12632140, -10526784, -8421427, -6316071, -4210714, -2105358, -1, -2105355, -4210709, -6316063, -8421416, -10526770, -12632124, -14737478, -16777039, -16777062, -16777084, -16777106, -16777128, -16777150, -16777172, -16777194, -16777216, -16777191, -16777166, -16777141, -16777116, -16777091, -16777066, -16777041, -16777016, -16777010, -16777003, -16776996, -16776989, -16776982, -16776975, -16776968, -16776961, -16776966, -16776970, -16776974, -16776978, -16776982, -16776986, -16776990, -16776994, -14745374, -12648218, -10551062, -8453906, -6356750, -4259594, -2162438, -65281, -2162435, -4259588, -6356742, -8453895, -10551048, -12648202, -14745355, -16776972, -14745387, -12648265, -10551144, -8454022, -6356901, -4259779, -2162658, -65536, -2162401, -4259265, -6355873, -8452737, -10549601, -12646209, -14743073, -16774145, -14734881, -12629825, -10525025, -8419969, -6315169, -4210113, -2105313, -256, -2104545, -4208833, -6313121, -8417153, -10521441, -12625729, -14730017, -16768513, -16761633, -16754497, -16747361, -16740225, -16733345, -16726209, -16719073, -16711936, -16718305, -16724673, -16731041, -16737409, -16743777, -16750145, -16756513, -16762881, -16756481, -16750081, -16743681, -16737281, -16730881, -16724481, -16718081, -16711681, -16717569, -16723201, -16728833, -16734465, -16740097, -16745729, -16751361, -16756993, -14719745, -12616961, -10514177, -8411393, -6308609, -4205825, -2103041, -1, -2105377, -4210753, -6316129, -8421505, -10526881, -12632257, -14737633,};//{-4576252, -4440548, -4304588, -4168627, -4032667, -3896707, -3760746, -3624786, -3488826, -3352865, -4272434, -5191747, -6111060, -7030373, -7949685, -8868998, -9788311, -10707624, -11626937, -12480713, -11035853, -9590992, -8146132, -6701271, -5256410, -3811550, -2366689, -856292, -2435811, -3949793, -5463776, -6977758, -8491741, -10005723, -11519706, -13033688, -12109779, -11120077, -10195912, -9206210, -8216764, -7292599, -6302897, -5313195, -6494107, -7609227, -8724347, -9905003, -11020123, -12200779, -13315899, -14431019, -15546138, -14110488, -12609045, -11107859, -9606416, -8105230, -6603787, -6668314, -6667304, -6731831, -6730821, -6795348, -6794082, -6990956, -7187829, -7384703, -7515784, -7712657, -7909531, -8040612, -8237485, -8434359, -8631232, -8762313, -8959187, -9156060, -9287141, -8761308, -8235218, -7709385, -7183295, -6657462, -6131372, -5605539, -5079449, -4553616, -4027526, -3501693, -2975603, -2449513, -2713965, -2978160, -3242355, -3506551, -3771002, -3969661, -4233857, -4498052, -4762503, -5026699, -5290894, -5489553, -5424537, -5359265, -5293992, -5228720, -5163448, -5098175, -5032903, -4967887, -4902614, -4837342, -4772070, -4706797, -4641525};
    private static final int[] alternative6_palette = {-9090739, -10076349, -11061703, -11981520, -12966874, -13952228, -14872045, -15857399, -16777216, -15986931, -15130853, -14340311, -13484233, -12628155, -11837613, -10981535, -10125457, -10981535, -11772077, -12628155, -13418440, -14274518, -15065060, -15921138, -16711423, -15924213, -15136747, -14349537, -13562071, -12774861, -11987395, -11200185, -10347182, -11200185, -11987395, -12774861, -13562071, -14349537, -15136747, -15924213, -16711423, -15988979, -15266279, -14543579, -13820878, -13098178, -12375478, -11652778, -10864541, -11587242, -12309942, -13032642, -13755086, -14477786, -15200486, -15923186, -16645630, -15857406, -15068925, -14280701, -13492220, -12703996, -11915515, -11127291, -10273274, -11127291, -11915515, -12703996, -13492220, -14280701, -15068925, -15857406, -16645630, -15661303, -14676720, -13626857, -12642273, -11657946, -10607827, -9623500, -8573380, -9623500, -10607827, -11592410, -12576737, -13626600, -14611183, -15595510, -16579837, -15920889, -15261940, -14602992, -13944043, -13285094, -12626146, -11967197, -11307992, -11967197, -12626146, -13285094, -13944043, -14602992, -15261940, -15920889, -16579837, -15856379, -15132664, -14408950, -13685235, -12961777, -12238062, -11514348, -10790633, -11514348, -12238062, -12961521, -13685235, -14408949, -15132408, -15856122, -16514044, -16121081, -15727861, -15334898, -14941678, -14548459, -14155495, -13762276, -13303520, -13762276, -14155495, -14548459, -14941678, -15334898, -15727861, -16121081, -16514044, -16448251, -16316665, -16185079, -16053493, -15987700, -15856114, -15724528, -15592942, -15724528, -15856114, -15921907, -16053493, -16185079, -16250872, -16382458, -16448251, -16510968, -16507893, -16505074, -16501999, -16564460, -16561641, -16558566, -16555491, -16558566, -16561385, -16498924, -16501743, -16504818, -16442101, -16445176, -16382458, -16380410, -16312825, -16310776, -16243191, -16175607, -16173558, -16105973, -16038132, -16105973, -16173558, -16175607, -16243191, -16310776, -16312825, -16380410, -16382458, -16313839, -16179427, -16045015, -15910603, -15776192, -15641780, -15507368, -15372956, -15507368, -15641780, -15776191, -15844811, -15979223, -16113634, -16248046, -16316665, -15985392, -15653863, -15322334, -14990805, -14659276, -14327747, -13996218, -13599153, -13996218, -14327747, -14659276, -14990805, -15322334, -15653863, -15985392, -16316665, -16118514, -15854827, -15591139, -15327452, -15129301, -14865613, -14601926, -14338238, -14601926, -14865613, -15063764, -15327451, -15591139, -15789290, -16052977, -16250872, -16250094, -16249060, -16248026, -16181456, -16180678, -16179644, -16178610, -16112040, -16178610, -16179644, -16180678, -16181456, -16248026, -16249060, -16250094, -16250872, -15396848, -14477287, -13623263, -12703702, -11784141, -10930117, -10010556,};//{-9903620, -9051663, -8133913, -7216419, -6364206, -5446712, -4528962, -3611468, -2759255, -1841761, -924011, -6261, -1388922, -2771582, -4154242, -5471366, -6854026, -8236686, -9553554, -9484943, -9416075, -9347463, -9278596, -9209728, -9141116, -9072248, -9003381, -8934769, -8865901, -8797033, -9454970, -10047115, -10639516, -11231660, -11889341, -12481742, -13073887, -13666031, -13403623, -13140958, -12878294, -12550093, -12287429, -12024764, -11762100, -11433899, -10646957, -9859759, -9072816, -8220082, -7433139, -6645941, -5793206, -5859770, -5860542, -5861313, -5927621, -5928392, -5929164, -5929935, -5996243, -5997014, -5997786, -5998557, -6064865, -6065636, -6066408, -6067179, -6198506, -6329832, -6460903, -6592229, -6723555, -6854626, -6920416, -7051742, -7182813, -7314139, -7445465, -7576536, -7707862, -7773396, -8490708, -9208020, -9859795, -10577107, -11228627, -11945938, -12597714, -13315026, -13966545, -13444552, -12856767, -12268982, -11681197, -11093412, -10505627, -9917842, -9395848, -8808063, -8220278, -7632493, -7044708, -6456923, -5869138, -5281352, -5869147, -6456941, -7044735, -7632529, -8220323, -8808117, -9395911, -9983705, -9982664, -9981366, -9980068, -9979026, -9977729, -9976431, -9975389, -9974091, -9972794, -9971752, -9970454};
    private static final int[] alternative7_palette = {-14297104, -13383963, -12405286, -11426353, -10447676, -9534279, -8555602, -7576925, -6597992, -5684851, -4705918, -3727242, -2748308, -2679965, -2545829, -2477229, -2343350, -2274750, -2140615, -2072271, -1938135, -1803999, -2265571, -2661607, -3057643, -3518958, -3914994, -4311030, -4706809, -6083576, -7394807, -8706038, -10082805, -11394035, -12770802, -14082033, -15393520, -16704494, -16570838, -16436925, -16237476, -16103563, -15969906, -15770457, -15636544, -15437095, -15632700, -15762513, -15957862, -16087674, -16283023, -16412836, -16608185, -16737997, -16742349, -16746701, -16751053, -16755405, -16759757, -16764109, -15777231, -14790352, -13803218, -12816339, -11829205, -10842326, -9855192, -8868313, -7881179, -6894300, -5907165, -5975243, -6043321, -6111398, -6179476, -6247554, -6315631, -6383709, -6451787, -6519864, -6587942, -6656020, -6723841, -6656011, -6588180, -6520349, -6386727, -6318896, -6251065, -6117443, -6049612, -5981781, -5848158, -5716568, -5519185, -5321803, -5190212, -4992830, -4795447, -4663857, -4466474, -4269092, -4071709, -5579292, -7021338, -8463384, -9970966, -11413012, -12855058};
    private static final int[] alternative8_palette = {-16777216, -16514044, -16250872, -15922164, -15658992, -15330284, -15067112, -14738404, -14475232, -14146524, -13883352, -13554388, -13291216, -13028044, -12699336, -12436165, -12107457, -11844285, -11515577, -11252405, -10923697, -10660525, -10331560, -9871009, -9410201, -8949650, -8488842, -8028291, -7567483, -7106931, -6580588, -6120036, -5659229, -5198677, -4737869, -4277318, -3816510, -3290423, -2829615, -2369063, -1908512, -1447704, -987153, -526345, -1, -132104, -264206, -330516, -462618, -529184, -661030, -793132, -859698, -991544, -1058110, -1189956, -1322059, -1388625, -1520471, -1587037, -1719139, -1850985, -1917551, -2049653, -2115963, -2248065, -2314375, -2577547, -2775183, -3038355, -3235991, -3499163, -3696799, -3894435, -4157351, -4354987, -4618159, -4815795, -5013431, -5276603, -5474239, -5737155, -5934791, -6132427, -6395599, -6593235, -6856407, -7054043, -7251423, -7580129, -7908578, -8237027, -8565476, -8893925, -9222374, -9550823, -9879273, -10207722, -10536171, -10864876, -11127789, -11456238, -11784687, -12113137, -12441586, -12770035, -13098484, -13426933, -13755382, -14083831, -14346744, -14478073, -14609401, -14740730, -14806522, -14937850, -15069179, -15134971, -15266555, -15397884, -15463676, -15595005, -15726333, -15791869, -15923198, -16054526, -16120318, -16251647, -16382975, -16448767, -16580096, -16711424, -16777216, -16776701, -16776186, -16775671, -16774900, -16774384, -16708333, -16707818, -16707047, -16706531, -16706016, -16639709, -16639194, -16638679, -16638163, -16637392, -16636877, -16570826, -16570310, -16569539, -16569024, -16568509, -16502201, -16501429, -16435121, -16434348, -16368040, -16367011, -16300703, -16234394, -16233622, -16167057, -16166285, -16099976, -16033668, -16032896, -15966331, -15965559, -15899250, -15832942, -15831913, -15765605, -15764832, -15698524, -15631959, -15632989, -15568226, -15503464, -15504493, -15439730, -15374968, -15310461, -15311234, -15246472, -15181965, -15117203, -15117976, -15053469, -14988707, -14989480, -14924973, -14860211, -14795448, -14796477, -14731715, -14666952, -14602189, -14734032, -14800082, -14931668, -14997719, -15129305, -15195611, -15327198, -15393248, -15524834, -15656421, -15722727, -15854313, -15920364, -15986414, -16118000, -16184051, -16315893, -16381943, -16513530, -16579580, -16711166};
    private static final int[] greenwhite_palette = {-14137846, -14134774, -14131446, -14128374, -14125046, -14121974, -14118646, -14115574, -14112246, -13716720, -13255657, -12794338, -12398812, -11937493, -11476430, -11080648, -10619585, -10158266, -8519836, -6815869, -5111902, -3407935, -1703968, -1, -1775648, -3551039, -5326429, -7101820, -8877211, -10652601, -12427992};
    private static final int[] dusk_palette = {-16777216, -16711421, -16645370, -16579575, -16513524, -16447473, -16316142, -16250091, -16184040, -16118245, -16052194, -15920863, -15854812, -15788761, -15722966, -15656915, -15525327, -15130314, -14669765, -14209215, -13748666, -13288116, -12892847, -12432297, -11971748, -11511199, -11050649, -10655380, -10194830, -9734281, -9273731, -8813182, -8352376, -8023928, -7695224, -7300983, -6972279, -6578038, -6249334, -5855093, -5526389, -5197941, -4803700, -4474996, -4080755, -3752051, -3357810, -3029106, -2634865, -2503792, -2372719, -2241645, -2110572, -1979498, -1848425, -1717351, -1586022, -1454949, -1323875, -1192802, -1061728, -930655, -799581, -668508, -537178, -800346, -997722, -1260633, -1458009, -1721177, -1918552, -2181464, -2378839, -2642007, -2839383, -3102294, -3299670, -3562838, -3760213, -4023125, -4220500, -4680793, -5141086, -5601379, -6061416, -6521709, -6982002, -7442039, -7902331, -8362624, -8822661, -9282954, -9743247, -10203284, -10663577, -11123870, -11518370, -11649958, -11781546, -11913134, -12044722, -12176310, -12307641, -12439229, -12570817, -12702405, -12833993, -12965324, -13096912, -13228500, -13360088, -13491676, -13623007, -13426399, -13229791, -12967390, -12770782, -12508382, -12311773, -12049373, -11852764, -11656156, -11393756, -11197147, -10934747, -10738139, -10475738, -10279130, -10016729, -9491928, -8967126, -8376789, -7851987, -7327186, -6736848, -6212047, -5621709, -5096907, -4572106, -3981768, -3456967, -2932165, -2341828, -1817026, -1226432, -1159870, -1093052, -1026233, -959415, -892596, -825778, -758959, -626605, -560043, -493224, -426406, -359587, -292769, -225950, -159132, -26777, -91546, -90523, -89756, -88733, -87966, -86943, -86176, -85153, -84386, -83363, -82596, -81573, -80806, -79783, -79016, -77993, -78249, -78504, -78759, -78758, -79013, -79269, -79524, -79523, -79778, -80033, -80289, -80288, -80543, -80798, -81053, -15516, -16799, -18082, -19364, -20647, -21930, -23212, -24495, -25777, -27060, -28343, -29625, -30908, -32191, -33473, -34756, -35782, -495817, -890316, -1350350, -1744849, -2204883, -2599382, -3059416, -3453915, -3913950, -4308448, -4768483, -5162981, -5623016, -6017514, -6477549, -6872047, -7331312, -7790577, -8249842, -8708851, -9168116, -9627380, -10086645, -10480118, -10939383, -11398648, -11857912, -12316921, -12776186, -13235451, -13694716, -14088188, -14285053, -14481661, -14612989, -14809597, -14940926, -15137534, -15268862, -15465470, -15662335, -15793407, -15990271, -16121343, -16318208, -16449280, -16646144};
    private static final int[] grayscale_palette = {-1, -789517, -1579033, -2302756, -3092272, -3815995, -4605511, -5395027, -6118750, -6908266, -7631989, -8421505, -9211021, -9934744, -10724260, -11447983, -12237499, -13027015, -13750738, -14540254, -15263977, -16053493, -16777216, -15987700, -15198184, -14408668, -13619152, -12829636, -12040120, -11184811, -10395295, -9605779, -8816263, -8026747, -7237231, -6447715, -5592406, -4802890, -4013374, -3223858, -2434342, -1644826, -855310};
    private static final int[] earthsky_palette = {-1, -1824, -3390, -4957, -6523, -8089, -9656, -11222, -12788, -803572, -1528820, -2253812, -2979059, -3769843, -4494835, -5220083, -5945074, -6536685, -7128039, -7654114, -8245468, -8836823, -9362897, -9954252, -10480070, -11004863, -11464120, -11923121, -12382378, -12841635, -13300636, -13759893, -14218894, -14546054, -14873214, -15200374, -15527534, -15854694, -16181854, -16509014, -16770638, -16702533, -16568635, -16500530, -16366632, -16298526, -16164629, -16096523, -15962625, -13991937, -12021249, -9985025, -8014081, -6043393, -4007169, -2036481};
    private static final int[] hotcold_palette = {-1, -1905153, -3744513, -5649409, -7488769, -9393665, -11233025, -13137921, -14977281, -15044107, -15110676, -15177502, -15244071, -15310640, -15377466, -15444035, -15510604, -15380311, -15184482, -15053933, -14858103, -14662274, -14531725, -14335896, -14139810, -13747364, -13289381, -12831399, -12373160, -11980713, -11522731, -11064748, -10606509, -9951909, -9231773, -8511381, -7791245, -7136645, -6416253, -5696117, -4975725, -4385638, -3795550, -3139926, -2549838, -1959751, -1304127, -714039, -58415, -51242, -43812, -36638, -29208, -22035, -14605, -7431};
    private static final int[] hotcold2_palette = {-51200, -49916, -48375, -47090, -45549, -44008, -42723, -41182, -39642, -38357, -36816, -35275, -33990, -32449, -31164, -29624, -28083, -26798, -25257, -23716, -22431, -20890, -19349, -18833, -18316, -17800, -17283, -16767, -15994, -15478, -14961, -14445, -13928, -13156, -12639, -12123, -11606, -11090, -10573, -9801, -9284, -8768, -8252, -7735, -6962, -72496, -72238, -137516, -137514, -202791, -202533, -268067, -267809, -333086, -333084, -332826, -398104, -398102, -463379, -463121, -528655, -528397, -593674, -593672, -658950, -658692, -658433, -789761, -855553, -986881, -1052673, -1184001, -1249537, -1315329, -1446657, -1512449, -1643777, -1709313, -1775105, -1906433, -1972225, -2103553, -2169345, -2234881, -2366209, -2432001, -2563329, -2629121, -2694657, -2825985, -2891777, -2957569, -3088897, -3154433, -3220225, -3286017, -3417345, -3482881, -3548673, -3614465, -3745793, -3811585, -3877121, -4008449, -4074241, -4140033, -4205569, -4336897, -4402689, -4468481, -4534017, -4665345, -4731137, -4862465, -4928257, -5059585, -5125377, -5191169, -5322497, -5388289, -5519617, -5585153, -5650945, -5782273, -5848065, -5979393, -6045185, -6110977, -6242305, -6308097, -6439425, -6505217, -6570753, -6310157, -5984025, -5723428, -5397296, -5136699, -4810567, -4549971, -4223838, -3963242, -3637365, -3311233, -3050637, -2724248, -2463652, -2137519, -1876923, -1550791, -1290194, -964062, -703465, -377333};
    private static final int[] fire_palette = {-16777216, -15073280, -13303808, -11534336, -9764864, -8060928, -6291456, -4521984, -2752512, -2423552, -2094336, -1765376, -1436160, -1106944, -777984, -448768, -54016, -52480, -50688, -48896, -47104, -45312, -43520, -41728, -39936, -38400, -36608, -34816, -33024, -31232, -29440, -27648, -25856, -24320, -22528, -20736, -18944, -17152, -15360, -13568, -11776, -10491, -8950, -7665, -6124, -4583, -3298, -1757, -215, -2105565, -4210914, -6316263, -8421612, -10526961, -12632310, -14737659};
    private static final int[] jet_palette = {-16777027, -16777022, -16777016, -16777011, -16777005, -16777000, -16776994, -16776989, -16776983, -16776978, -16776972, -16776967, -16776961, -16775681, -16774145, -16772865, -16771329, -16770049, -16768769, -16767233, -16765697, -16764417, -16762881, -16761601, -16760065, -16758785, -16757249, -16755969, -16754433, -16753153, -16751617, -16750337, -16748801, -16747521, -16745985, -16744705, -16743169, -16742145, -16740865, -16739585, -16738305, -16737281, -16736001, -16734721, -16733441, -16732417, -16731137, -16729857, -16728577, -16727297, -16725761, -16724481, -16722945, -16721665, -16720129, -16718849, -16717313, -16716033, -16714497, -16713217, -16711681, -16384007, -15990796, -15663122, -15269911, -14942237, -14614562, -14221352, -13828141, -13500467, -13107256, -12779582, -12386371, -12058696, -11665485, -11337810, -10944598, -10616923, -10223712, -9896037, -9502825, -9175150, -8781939, -8454264, -8061052, -7798914, -7471239, -7143565, -6815890, -6553752, -6226077, -5898403, -5570728, -5308590, -4980915, -4653241, -4325566, -3997892, -3604681, -3277007, -2883796, -2556122, -2162911, -1835237, -1442026, -1114352, -721141, -393467, -256, -1792, -3072, -4608, -5888, -7424, -8704, -10240, -11520, -13056, -14336, -15872, -17152, -18432, -19712, -20992, -22016, -23296, -24576, -25856, -26880, -28160, -29440, -30720, -31744, -33280, -34560, -36096, -37376, -38912, -40192, -41728, -43008, -44544, -45824, -47360, -48640, -50176, -51456, -52992, -54272, -55808, -57088, -58624, -59904, -61440, -62720, -64256, -65536, -458752, -786432, -1179648, -1507328, -1900544, -2228224, -2621440, -2949120, -3342336, -3670016, -4063232, -4390912, -4718592, -5046272, -5373952, -5636096, -5963776, -6291456, -6619136, -6881280, -7208960, -7536640, -7864320, -8126464, -8847345, -9568225, -10289105, -11009985, -11730866, -12451746, -13172626, -13893506, -14614387, -15335267, -16121683,};

    public Palette(int color_choice, int FROMx, int TOx, int FROMy, int TOy, double xCenter, double yCenter, double size, int max_iterations, int bailout_test_algorithm, double bailout, String bailout_test_user_formula, String bailout_test_user_formula2, int bailout_test_comparison, double n_norm, boolean d3, int detail, double fiX, double fiY, double color_3d_blending, MainWindow ptr, Color fractal_color, BufferedImage image, boolean[] filters, int[] filters_options_vals, int out_coloring_algorithm, int user_out_coloring_algorithm, String outcoloring_formula, String[] user_outcoloring_conditions, String[] user_outcoloring_condition_formula, int in_coloring_algorithm, int user_in_coloring_algorithm, String incoloring_formula, String[] user_incoloring_conditions, String[] user_incoloring_condition_formula, boolean smoothing, boolean boundary_tracing, boolean periodicity_checking, int plane_type, boolean burning_ship, boolean mandel_grass, double[] mandel_grass_vals, int function, double z_exponent, double[] z_exponent_complex, int color_cycling_location, double[] rotation_vals, double[] rotation_center, boolean perturbation, double[] perturbation_vals, boolean variable_perturbation, int user_perturbation_algorithm, String[] user_perturbation_conditions, String[] user_perturbation_condition_formula, String perturbation_user_formula, boolean init_val, double[] initial_vals, boolean variable_init_value, int user_initial_value_algorithm, String[] user_initial_value_conditions, String[] user_initial_value_condition_formula, String initial_value_user_formula, double[] coefficients, double[] z_exponent_nova, double[] relaxation, int nova_method, String user_formula, String user_formula2, int bail_technique, String user_plane, int user_plane_algorithm, String[] user_plane_conditions, String[] user_plane_condition_formula,  String[] user_formula_iteration_based, String[] user_formula_conditions, String[] user_formula_condition_formula, boolean exterior_de, double exterior_de_factor, double height_ratio, double[] plane_transform_center, double plane_transform_angle, double plane_transform_radius, double [] plane_transform_scales, double plane_transform_angle2, int plane_transform_sides, double plane_transform_amount, double  d3_height_scale, double d3_height_offset, int escaping_smooth_algorithm, int converging_smooth_algorithm, boolean bump_map, double lightDirectionDegrees, double bumpMappingDepth, double bumpMappingStrength, double color_intensity, boolean polar_projection, double circle_period, boolean fake_de, double fake_de_factor, String user_fz_formula, String user_dfz_formula, String user_ddfz_formula) {

        super(FROMx, TOx, FROMy, TOy, xCenter, yCenter, size, max_iterations, bailout_test_algorithm, bailout, bailout_test_user_formula, bailout_test_user_formula2, bailout_test_comparison, n_norm, d3, detail, fiX, fiY, color_3d_blending, ptr, fractal_color, image, filters, filters_options_vals, out_coloring_algorithm, user_out_coloring_algorithm, outcoloring_formula, user_outcoloring_conditions, user_outcoloring_condition_formula, in_coloring_algorithm, user_in_coloring_algorithm, incoloring_formula,  user_incoloring_conditions, user_incoloring_condition_formula, smoothing, boundary_tracing, periodicity_checking, plane_type, burning_ship, mandel_grass, mandel_grass_vals, function, z_exponent, z_exponent_complex, color_cycling_location, rotation_vals, rotation_center, perturbation, perturbation_vals, variable_perturbation, user_perturbation_algorithm, user_perturbation_conditions, user_perturbation_condition_formula, perturbation_user_formula, init_val, initial_vals, variable_init_value, user_initial_value_algorithm, user_initial_value_conditions, user_initial_value_condition_formula, initial_value_user_formula, coefficients, z_exponent_nova, relaxation, nova_method, user_formula, user_formula2, bail_technique, user_plane, user_plane_algorithm, user_plane_conditions, user_plane_condition_formula,  user_formula_iteration_based, user_formula_conditions, user_formula_condition_formula, exterior_de, exterior_de_factor, height_ratio, plane_transform_center, plane_transform_angle, plane_transform_radius, plane_transform_scales, plane_transform_angle2, plane_transform_sides, plane_transform_amount, d3_height_scale, d3_height_offset, escaping_smooth_algorithm, converging_smooth_algorithm, bump_map, lightDirectionDegrees, bumpMappingDepth, bumpMappingStrength, polar_projection, circle_period, fake_de, fake_de_factor, user_fz_formula, user_dfz_formula, user_ddfz_formula);

        switch (color_choice) {

            case 0:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(default_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(default_palette, color_intensity);
                }
                break;
            case 1:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(spectrum_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(spectrum_palette, color_intensity);
                }
                break;
            case 2:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative_palette, color_intensity);
                }
                break;
            case 3:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative2_palette, color_intensity);
                }
                break;
            case 4:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative3_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative3_palette, color_intensity);
                }
                break;
            case 5:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative4_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative4_palette, color_intensity);
                }
                break;
            case 6:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative5_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative5_palette, color_intensity);
                }
                break;
            case 7:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative6_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative6_palette, color_intensity);
                }
                break;
            case 8:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative7_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative7_palette, color_intensity);
                }
                break;
            case 9:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative8_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative8_palette, color_intensity);
                }
                break;
            case 10:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(greenwhite_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(greenwhite_palette, color_intensity);
                }
                break;
            case 11:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(dusk_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(dusk_palette, color_intensity);
                }
                break;
            case 12:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(grayscale_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(grayscale_palette, color_intensity);
                }
                break;
            case 13:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(earthsky_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(earthsky_palette, color_intensity);
                }
                break;
            case 14:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold_palette, color_intensity);
                }
                break;
            case 15:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold2_palette, color_intensity);
                }
                break;
            case 16:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(fire_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(fire_palette, color_intensity);
                }
                break;
            case 17:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(jet_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(jet_palette, color_intensity);
                }
                break;

        }

    }

    public Palette(int color_choice, int FROMx, int TOx, int FROMy, int TOy, double xCenter, double yCenter, double size, int max_iterations, int bailout_test_algorithm, double bailout, String bailout_test_user_formula, String bailout_test_user_formula2, int bailout_test_comparison, double n_norm, boolean d3, int detail, double fiX, double fiY, double color_3d_blending, MainWindow ptr, Color fractal_color, BufferedImage image, boolean[] filters, int[] filters_options_vals, int out_coloring_algorithm, int user_out_coloring_algorithm, String outcoloring_formula, String[] user_outcoloring_conditions, String[] user_outcoloring_condition_formula, int in_coloring_algorithm, int user_in_coloring_algorithm, String incoloring_formula, String[] user_incoloring_conditions, String[] user_incoloring_condition_formula, boolean smoothing, boolean boundary_tracing, boolean periodicity_checking, int plane_type, boolean apply_plane_on_julia, boolean burning_ship, boolean mandel_grass, double[] mandel_grass_vals, int function, double z_exponent, double[] z_exponent_complex, int color_cycling_location, double[] rotation_vals, double[] rotation_center, double[] coefficients, double[] z_exponent_nova, double[] relaxation, int nova_method, String user_formula, String user_formula2, int bail_technique, String user_plane, int user_plane_algorithm, String[] user_plane_conditions, String[] user_plane_condition_formula,  String[] user_formula_iteration_based, String[] user_formula_conditions, String[] user_formula_condition_formula, boolean exterior_de, double exterior_de_factor, double height_ratio, double[] plane_transform_center, double plane_transform_angle, double plane_transform_radius, double [] plane_transform_scales, double plane_transform_angle2, int plane_transform_sides, double plane_transform_amount, double  d3_height_scale, double d3_height_offset, int escaping_smooth_algorithm, int converging_smooth_algorithm, boolean bump_map, double lightDirectionDegrees, double bumpMappingDepth, double bumpMappingStrength, double color_intensity, boolean polar_projection, double circle_period, boolean fake_de, double fake_de_factor, double xJuliaCenter, double yJuliaCenter) {

        super(FROMx, TOx, FROMy, TOy, xCenter, yCenter, size, max_iterations, bailout_test_algorithm, bailout, bailout_test_user_formula, bailout_test_user_formula2, bailout_test_comparison, n_norm, d3, detail, fiX, fiY, color_3d_blending, ptr, fractal_color, image, filters, filters_options_vals, out_coloring_algorithm, user_out_coloring_algorithm, outcoloring_formula, user_outcoloring_conditions, user_outcoloring_condition_formula, in_coloring_algorithm, user_in_coloring_algorithm, incoloring_formula,  user_incoloring_conditions, user_incoloring_condition_formula, smoothing, boundary_tracing, periodicity_checking, plane_type, apply_plane_on_julia, burning_ship, mandel_grass, mandel_grass_vals, function, z_exponent, z_exponent_complex, color_cycling_location, rotation_vals, rotation_center, coefficients, z_exponent_nova, relaxation, nova_method, user_formula, user_formula2, bail_technique, user_plane, user_plane_algorithm, user_plane_conditions, user_plane_condition_formula,  user_formula_iteration_based, user_formula_conditions, user_formula_condition_formula, exterior_de, exterior_de_factor, height_ratio, plane_transform_center, plane_transform_angle, plane_transform_radius, plane_transform_scales, plane_transform_angle2, plane_transform_sides, plane_transform_amount, d3_height_scale, d3_height_offset, escaping_smooth_algorithm, converging_smooth_algorithm, bump_map, lightDirectionDegrees, bumpMappingDepth, bumpMappingStrength, polar_projection, circle_period, fake_de, fake_de_factor, xJuliaCenter, yJuliaCenter);

        switch (color_choice) {

            case 0:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(default_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(default_palette, color_intensity);
                }
                break;
            case 1:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(spectrum_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(spectrum_palette, color_intensity);
                }
                break;
            case 2:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative_palette, color_intensity);
                }
                break;
            case 3:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative2_palette, color_intensity);
                }
                break;
            case 4:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative3_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative3_palette, color_intensity);
                }
                break;
            case 5:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative4_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative4_palette, color_intensity);
                }
                break;
            case 6:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative5_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative5_palette, color_intensity);
                }
                break;
            case 7:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative6_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative6_palette, color_intensity);
                }
                break;
            case 8:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative7_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative7_palette, color_intensity);
                }
                break;
            case 9:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative8_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative8_palette, color_intensity);
                }
                break;
            case 10:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(greenwhite_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(greenwhite_palette, color_intensity);
                }
                break;
            case 11:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(dusk_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(dusk_palette, color_intensity);
                }
                break;
            case 12:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(grayscale_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(grayscale_palette, color_intensity);
                }
                break;
            case 13:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(earthsky_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(earthsky_palette, color_intensity);
                }
                break;
            case 14:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold_palette, color_intensity);
                }
                break;
            case 15:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold2_palette, color_intensity);
                }
                break;
            case 16:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(fire_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(fire_palette, color_intensity);
                }
                break;
            case 17:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(jet_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(jet_palette, color_intensity);
                }
                break;

        }


    }

    public Palette(int color_choice, int FROMx, int TOx, int FROMy, int TOy, double xCenter, double yCenter, double size, int max_iterations, int bailout_test_algorithm, double bailout, String bailout_test_user_formula, String bailout_test_user_formula2, int bailout_test_comparison, double n_norm, MainWindow ptr, Color fractal_color, BufferedImage image, boolean[] filters, int[] filters_options_vals, int out_coloring_algorithm, int user_out_coloring_algorithm, String outcoloring_formula, String[] user_outcoloring_conditions, String[] user_outcoloring_condition_formula, int in_coloring_algorithm, int user_in_coloring_algorithm, String incoloring_formula, String[] user_incoloring_conditions, String[] user_incoloring_condition_formula, boolean smoothing, boolean periodicity_checking, int plane_type, boolean apply_plane_on_julia, boolean burning_ship, boolean mandel_grass, double[] mandel_grass_vals, int function, double z_exponent, double[] z_exponent_complex, int color_cycling_location, double[] rotation_vals, double[] rotation_center, double[] coefficients, double[] z_exponent_nova, double[] relaxation, int nova_method, String user_formula, String user_formula2, int bail_technique, String user_plane, int user_plane_algorithm, String[] user_plane_conditions, String[] user_plane_condition_formula,  String[] user_formula_iteration_based, String[] user_formula_conditions, String[] user_formula_condition_formula, boolean exterior_de, double exterior_de_factor, double height_ratio, double[] plane_transform_center, double plane_transform_angle, double plane_transform_radius, double [] plane_transform_scales, double plane_transform_angle2, int plane_transform_sides, double plane_transform_amount, int escaping_smooth_algorithm, int converging_smooth_algorithm, boolean bump_map, double lightDirectionDegrees, double bumpMappingDepth, double bumpMappingStrength, double color_intensity, boolean polar_projection, double circle_period, boolean fake_de, double fake_de_factor) {

        super(FROMx, TOx, FROMy, TOy, xCenter, yCenter, size, max_iterations, bailout_test_algorithm, bailout, bailout_test_user_formula, bailout_test_user_formula2, bailout_test_comparison, n_norm, ptr, fractal_color, image, filters, filters_options_vals, out_coloring_algorithm, user_out_coloring_algorithm, outcoloring_formula, user_outcoloring_conditions, user_outcoloring_condition_formula, in_coloring_algorithm, user_in_coloring_algorithm, incoloring_formula,  user_incoloring_conditions, user_incoloring_condition_formula, smoothing, periodicity_checking, plane_type, apply_plane_on_julia, burning_ship, mandel_grass, mandel_grass_vals, function, z_exponent, z_exponent_complex, color_cycling_location, rotation_vals, rotation_center, coefficients, z_exponent_nova, relaxation, nova_method, user_formula, user_formula2, bail_technique, user_plane, user_plane_algorithm, user_plane_conditions, user_plane_condition_formula,  user_formula_iteration_based, user_formula_conditions, user_formula_condition_formula, exterior_de, exterior_de_factor, height_ratio, plane_transform_center, plane_transform_angle, plane_transform_radius, plane_transform_scales, plane_transform_angle2, plane_transform_sides, plane_transform_amount, escaping_smooth_algorithm, converging_smooth_algorithm, bump_map, lightDirectionDegrees, bumpMappingDepth, bumpMappingStrength, polar_projection, circle_period, fake_de, fake_de_factor);

        switch (color_choice) {

            case 0:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(default_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(default_palette, color_intensity);
                }
                break;
            case 1:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(spectrum_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(spectrum_palette, color_intensity);
                }
                break;
            case 2:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative_palette, color_intensity);
                }
                break;
            case 3:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative2_palette, color_intensity);
                }
                break;
            case 4:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative3_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative3_palette, color_intensity);
                }
                break;
            case 5:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative4_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative4_palette, color_intensity);
                }
                break;
            case 6:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative5_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative5_palette, color_intensity);
                }
                break;
            case 7:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative6_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative6_palette, color_intensity);
                }
                break;
            case 8:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative7_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative7_palette, color_intensity);
                }
                break;
            case 9:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative8_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative8_palette, color_intensity);
                }
                break;
            case 10:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(greenwhite_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(greenwhite_palette, color_intensity);
                }
                break;
            case 11:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(dusk_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(dusk_palette, color_intensity);
                }
                break;
            case 12:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(grayscale_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(grayscale_palette, color_intensity);
                }
                break;
            case 13:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(earthsky_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(earthsky_palette, color_intensity);
                }
                break;
            case 14:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold_palette, color_intensity);
                }
                break;
            case 15:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold2_palette, color_intensity);
                }
                break;
            case 16:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(fire_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(fire_palette, color_intensity);
                }
                break;
            case 17:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(jet_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(jet_palette, color_intensity);
                }
                break;

        }


    }

    public Palette(int color_choice, int FROMx, int TOx, int FROMy, int TOy, double xCenter, double yCenter, double size, int max_iterations, int bailout_test_algorithm, double bailout, String bailout_test_user_formula, String bailout_test_user_formula2, int bailout_test_comparison, double n_norm, MainWindow ptr, Color fractal_color, boolean fast_julia_filters, BufferedImage image, boolean boundary_tracing, boolean periodicity_checking, int plane_type, boolean apply_plane_on_julia, boolean[] filters, int[] filters_options_vals, int out_coloring_algorithm, int user_out_coloring_algorithm, String outcoloring_formula, String[] user_outcoloring_conditions, String[] user_outcoloring_condition_formula, int in_coloring_algorithm, int user_in_coloring_algorithm, String incoloring_formula, String[] user_incoloring_conditions, String[] user_incoloring_condition_formula, boolean smoothing, boolean burning_ship, boolean mandel_grass, double[] mandel_grass_vals, int function, double z_exponent, double[] z_exponent_complex, int color_cycling_location, double[] rotation_vals, double[] rotation_center, double[] coefficients, double[] z_exponent_nova, double[] relaxation, int nova_method, String user_formula, String user_formula2, int bail_technique, String user_plane, int user_plane_algorithm, String[] user_plane_conditions, String[] user_plane_condition_formula,  String[] user_formula_iteration_based, String[] user_formula_conditions, String[] user_formula_condition_formula, boolean exterior_de, double exterior_de_factor, double height_ratio, double[] plane_transform_center, double plane_transform_angle, double plane_transform_radius, double [] plane_transform_scales, double plane_transform_angle2, int plane_transform_sides, double plane_transform_amount, int escaping_smooth_algorithm, int converging_smooth_algorithm, boolean bump_map, double lightDirectionDegrees, double bumpMappingDepth, double bumpMappingStrength, double color_intensity, boolean polar_projection, double circle_period, boolean fake_de, double fake_de_factor, double xJuliaCenter, double yJuliaCenter) {

        super(FROMx, TOx, FROMy, TOy, xCenter, yCenter, size, max_iterations, bailout_test_algorithm, bailout, bailout_test_user_formula, bailout_test_user_formula2, bailout_test_comparison, n_norm, ptr, fractal_color, fast_julia_filters, image, boundary_tracing, periodicity_checking, plane_type, apply_plane_on_julia, out_coloring_algorithm, user_out_coloring_algorithm, outcoloring_formula, user_outcoloring_conditions, user_outcoloring_condition_formula, in_coloring_algorithm, user_in_coloring_algorithm, incoloring_formula,  user_incoloring_conditions, user_incoloring_condition_formula, smoothing, filters, filters_options_vals, burning_ship, mandel_grass, mandel_grass_vals, function, z_exponent, z_exponent_complex, color_cycling_location, rotation_vals, rotation_center, coefficients, z_exponent_nova, relaxation, nova_method, user_formula, user_formula2, bail_technique, user_plane, user_plane_algorithm, user_plane_conditions, user_plane_condition_formula,  user_formula_iteration_based, user_formula_conditions, user_formula_condition_formula, exterior_de, exterior_de_factor, height_ratio, plane_transform_center, plane_transform_angle, plane_transform_radius, plane_transform_scales, plane_transform_angle2, plane_transform_sides, plane_transform_amount, escaping_smooth_algorithm, converging_smooth_algorithm, bump_map, lightDirectionDegrees, bumpMappingDepth, bumpMappingStrength, polar_projection, circle_period, fake_de, fake_de_factor, xJuliaCenter, yJuliaCenter);

        switch (color_choice) {

            case 0:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(default_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(default_palette, color_intensity);
                }
                break;
            case 1:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(spectrum_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(spectrum_palette, color_intensity);
                }
                break;
            case 2:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative_palette, color_intensity);
                }
                break;
            case 3:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative2_palette, color_intensity);
                }
                break;
            case 4:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative3_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative3_palette, color_intensity);
                }
                break;
            case 5:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative4_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative4_palette, color_intensity);
                }
                break;
            case 6:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative5_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative5_palette, color_intensity);
                }
                break;
            case 7:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative6_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative6_palette, color_intensity);
                }
                break;
            case 8:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative7_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative7_palette, color_intensity);
                }
                break;
            case 9:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative8_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative8_palette, color_intensity);
                }
                break;
            case 10:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(greenwhite_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(greenwhite_palette, color_intensity);
                }
                break;
            case 11:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(dusk_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(dusk_palette, color_intensity);
                }
                break;
            case 12:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(grayscale_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(grayscale_palette, color_intensity);
                }
                break;
            case 13:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(earthsky_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(earthsky_palette, color_intensity);
                }
                break;
            case 14:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold_palette, color_intensity);
                }
                break;
            case 15:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold2_palette, color_intensity);
                }
                break;
            case 16:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(fire_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(fire_palette, color_intensity);
                }
                break;
            case 17:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(jet_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(jet_palette, color_intensity);
                }
                break;

        }


    }

    public Palette(int color_choice, int FROMx, int TOx, int FROMy, int TOy, int max_iterations, MainWindow ptr, Color fractal_color, boolean smoothing, BufferedImage image, int color_cycling_location, boolean bump_map, double lightDirectionDegrees, double bumpMappingDepth, double bumpMappingStrength, double color_intensity, boolean fake_de, double fake_de_factor) {

        super(FROMx, TOx, FROMy, TOy, max_iterations, ptr, fractal_color, image, color_cycling_location, bump_map, lightDirectionDegrees, bumpMappingDepth, bumpMappingStrength, fake_de, fake_de_factor);

        switch (color_choice) {

            case 0:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(default_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(default_palette, color_intensity);
                }
                break;
            case 1:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(spectrum_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(spectrum_palette, color_intensity);
                }
                break;
            case 2:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative_palette, color_intensity);
                }
                break;
            case 3:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative2_palette, color_intensity);
                }
                break;
            case 4:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative3_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative3_palette, color_intensity);
                }
                break;
            case 5:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative4_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative4_palette, color_intensity);
                }
                break;
            case 6:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative5_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative5_palette, color_intensity);
                }
                break;
            case 7:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative6_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative6_palette, color_intensity);
                }
                break;
            case 8:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative7_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative7_palette, color_intensity);
                }
                break;
            case 9:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative8_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative8_palette, color_intensity);
                }
                break;
            case 10:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(greenwhite_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(greenwhite_palette, color_intensity);
                }
                break;
            case 11:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(dusk_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(dusk_palette, color_intensity);
                }
                break;
            case 12:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(grayscale_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(grayscale_palette, color_intensity);
                }
                break;
            case 13:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(earthsky_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(earthsky_palette, color_intensity);
                }
                break;
            case 14:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold_palette, color_intensity);
                }
                break;
            case 15:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold2_palette, color_intensity);
                }
                break;
            case 16:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(fire_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(fire_palette, color_intensity);
                }
                break;
            case 17:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(jet_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(jet_palette, color_intensity);
                }
                break;

        }


    }

    public Palette(int color_choice, int FROMx, int TOx, int FROMy, int TOy, int max_iterations, MainWindow ptr, BufferedImage image, Color fractal_color, int color_cycling_location, boolean smoothing, boolean[] filters, int[] filters_options_vals, boolean bump_map, double lightDirectionDegrees, double bumpMappingDepth, double bumpMappingStrength, double color_intensity, boolean fake_de, double fake_de_factor) {

        super(FROMx, TOx, FROMy, TOy, max_iterations, ptr, image, fractal_color, color_cycling_location, filters, filters_options_vals, bump_map, lightDirectionDegrees, bumpMappingDepth, bumpMappingStrength, fake_de, fake_de_factor);

        switch (color_choice) {

            case 0:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(default_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(default_palette, color_intensity);
                }
                break;
            case 1:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(spectrum_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(spectrum_palette, color_intensity);
                }
                break;
            case 2:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative_palette, color_intensity);
                }
                break;
            case 3:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative2_palette, color_intensity);
                }
                break;
            case 4:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative3_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative3_palette, color_intensity);
                }
                break;
            case 5:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative4_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative4_palette, color_intensity);
                }
                break;
            case 6:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative5_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative5_palette, color_intensity);
                }
                break;
            case 7:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative6_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative6_palette, color_intensity);
                }
                break;
            case 8:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative7_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative7_palette, color_intensity);
                }
                break;
            case 9:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(alternative8_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(alternative8_palette, color_intensity);
                }
                break;
            case 10:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(greenwhite_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(greenwhite_palette, color_intensity);
                }
                break;
            case 11:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(dusk_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(dusk_palette, color_intensity);
                }
                break;
            case 12:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(grayscale_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(grayscale_palette, color_intensity);
                }
                break;
            case 13:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(earthsky_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(earthsky_palette, color_intensity);
                }
                break;
            case 14:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold_palette, color_intensity);
                }
                break;
            case 15:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(hotcold2_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(hotcold2_palette, color_intensity);
                }
                break;
            case 16:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(fire_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(fire_palette, color_intensity);
                }
                break;
            case 17:
                if(!smoothing) {
                    palette_color = new PaletteColorNormal(jet_palette, color_intensity);
                }
                else {
                    palette_color = new PaletteColorSmooth(jet_palette, color_intensity);
                }
                break;

        }


    }

    public Palette(int FROMx, int TOx, int FROMy, int TOy, int detail, double fiX, double fiY, double color_3d_blending, boolean draw_action, MainWindow ptr, BufferedImage image, boolean[] filters, int[] filters_options_vals) {

        super(FROMx, TOx, FROMy, TOy, detail, fiX, fiY, color_3d_blending, draw_action, ptr, image, filters, filters_options_vals);

    }
}
